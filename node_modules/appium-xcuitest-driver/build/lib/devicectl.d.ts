/**
 * @typedef {Object} ProcessInfo
 * @property {number} processIdentifier
 * @property {string} executable
 */
/**
 * @typedef {Object} AppInfo
 * @property {boolean} appClip
 * @property {boolean} builtByDeveloper
 * @property {string} bundleIdentifier
 * @property {string} bundleVersion
 * @property {boolean} defaultApp
 * @property {boolean} hidden
 * @property {boolean} internalApp
 * @property {string} name
 * @property {boolean} removable
 * @property {string} url
 * @property {string} version
 */
/**
 * @typedef {Object} ExecuteOptions
 * @property {boolean} [logStdout=false]
 * @property {boolean} [asJson=true]
 * @property {boolean} [asynchronous=false]
 * @property {string[]|string} [subcommandOptions]
 */
/**
 * @typedef {{asynchronous: true}} TAsyncOpts
 */
export class Devicectl {
    /**
     * @since Xcode 15, iOS 17
     * @param {string} udid
     * @param {import('@appium/types').AppiumLogger} log
     */
    constructor(udid: string, log: import('@appium/types').AppiumLogger);
    udid: string;
    log: import("@appium/types").AppiumLogger;
    /**
     * @template {ExecuteOptions} TExecOpts
     * @param {string[]} subcommand
     * @param {TExecOpts} [opts]
     * @return {Promise<TExecOpts extends TAsyncOpts ? import('teen_process').SubProcess : import('teen_process').TeenProcessExecResult>}
     */
    execute<TExecOpts extends ExecuteOptions>(subcommand: string[], opts?: TExecOpts | undefined): Promise<TExecOpts extends TAsyncOpts ? SubProcess : import("teen_process").TeenProcessExecResult<any>>;
    /**
     * Simulates memory warning for the process with the given PID
     *
     * @param {number|string} pid The process identifier to simulate the Low Memory warning for
     * @return {Promise<void>}
     */
    sendMemoryWarning(pid: number | string): Promise<void>;
    /**
     * Lists running processes on the device
     *
     * @returns {Promise<ProcessInfo[]>}
     */
    listProcesses(): Promise<ProcessInfo[]>;
    /**
     * Send POSIX signal to the running process
     *
     * @param {number|string} pid The process identifier to send a signal to
     * @param {number|string} signal The signal to send to a process. See 'man signal' for a list of signals
     * @returns {Promise<void>}
     */
    sendSignalToProcess(pid: number | string, signal: number | string): Promise<void>;
    /**
     * Retrieves the list of installed apps from the device
     *
     * @param {string?} [bundleId=null] Provide the target bundle identifier
     * to speed up the lookup.
     * @returns {Promise<AppInfo[]>} Empty array is returned if no matching apps are found
     */
    listApps(bundleId?: string | null | undefined): Promise<AppInfo[]>;
}
export type ProcessInfo = {
    processIdentifier: number;
    executable: string;
};
export type AppInfo = {
    appClip: boolean;
    builtByDeveloper: boolean;
    bundleIdentifier: string;
    bundleVersion: string;
    defaultApp: boolean;
    hidden: boolean;
    internalApp: boolean;
    name: string;
    removable: boolean;
    url: string;
    version: string;
};
export type ExecuteOptions = {
    logStdout?: boolean | undefined;
    asJson?: boolean | undefined;
    asynchronous?: boolean | undefined;
    subcommandOptions?: string | string[] | undefined;
};
export type TAsyncOpts = {
    asynchronous: true;
};
import { SubProcess } from 'teen_process';
//# sourceMappingURL=devicectl.d.ts.map